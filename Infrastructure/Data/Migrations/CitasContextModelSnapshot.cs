// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(CitasContext))]
    partial class CitasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Acudiente", b =>
                {
                    b.Property<int>("AcuCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcuDireccion")
                        .HasColumnType("longtext");

                    b.Property<string>("AcuNombre")
                        .HasColumnType("longtext");

                    b.Property<string>("AcuTelefono")
                        .HasColumnType("longtext");

                    b.HasKey("AcuCodigo");

                    b.ToTable("Acudientes");
                });

            modelBuilder.Entity("Core.Entities.Cita", b =>
                {
                    b.Property<int>("CitCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CitDatosUsuario")
                        .HasColumnType("int");

                    b.Property<int>("CitEstado")
                        .HasColumnType("int");

                    b.Property<DateTime>("CitFecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CitMedico")
                        .HasColumnType("int");

                    b.Property<int?>("EstadoCitaEstCitaId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicoMedNroMatriculaProfesional")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioUsuId")
                        .HasColumnType("int");

                    b.HasKey("CitCodigo");

                    b.HasIndex("EstadoCitaEstCitaId");

                    b.HasIndex("MedicoMedNroMatriculaProfesional");

                    b.HasIndex("UsuarioUsuId");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("Core.Entities.Consultorio", b =>
                {
                    b.Property<int>("ConsCodigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConsNombre")
                        .HasColumnType("longtext");

                    b.HasKey("ConsCodigo");

                    b.ToTable("Consultorios");
                });

            modelBuilder.Entity("Core.Entities.Especialidad", b =>
                {
                    b.Property<int>("EspId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EspNombre")
                        .HasColumnType("longtext");

                    b.HasKey("EspId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("Core.Entities.EstadoCita", b =>
                {
                    b.Property<int>("EstCitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EstCitaNombre")
                        .HasColumnType("longtext");

                    b.HasKey("EstCitaId");

                    b.ToTable("EstadoCitas");
                });

            modelBuilder.Entity("Core.Entities.Genero", b =>
                {
                    b.Property<int>("GenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GenAbreviatura")
                        .HasColumnType("longtext");

                    b.Property<string>("GenNombre")
                        .HasColumnType("longtext");

                    b.HasKey("GenId");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("Core.Entities.Medico", b =>
                {
                    b.Property<int>("MedNroMatriculaProfesional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ConsultorioConsCodigo")
                        .HasColumnType("int");

                    b.Property<int?>("EspecialidadEspId")
                        .HasColumnType("int");

                    b.Property<int>("MedConsultorio")
                        .HasColumnType("int");

                    b.Property<int>("MedEspecialidad")
                        .HasColumnType("int");

                    b.Property<string>("MedNombreCompleto")
                        .HasColumnType("longtext");

                    b.HasKey("MedNroMatriculaProfesional");

                    b.HasIndex("ConsultorioConsCodigo");

                    b.HasIndex("EspecialidadEspId");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("TipDocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TipDocAbreviatura")
                        .HasColumnType("longtext");

                    b.Property<string>("TipDocNombre")
                        .HasColumnType("longtext");

                    b.HasKey("TipDocId");

                    b.ToTable("TipoDocumentos");
                });

            modelBuilder.Entity("Core.Entities.Usuario", b =>
                {
                    b.Property<int>("UsuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AcudienteAcuCodigo")
                        .HasColumnType("int");

                    b.Property<int?>("GeneroGenId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoDocumentoTipDocId")
                        .HasColumnType("int");

                    b.Property<int>("UsuAcudiente")
                        .HasColumnType("int");

                    b.Property<string>("UsuDireccion")
                        .HasColumnType("longtext");

                    b.Property<string>("UsuEmail")
                        .HasColumnType("longtext");

                    b.Property<int>("UsuGenero")
                        .HasColumnType("int");

                    b.Property<string>("UsuNombre")
                        .HasColumnType("longtext");

                    b.Property<string>("UsuPrimerApellidoUsuar")
                        .HasColumnType("longtext");

                    b.Property<string>("UsuSegdoApellidoUsuar")
                        .HasColumnType("longtext");

                    b.Property<string>("UsuSegdoNombre")
                        .HasColumnType("longtext");

                    b.Property<string>("UsuTelefono")
                        .HasColumnType("longtext");

                    b.Property<int>("UsuTipoDoc")
                        .HasColumnType("int");

                    b.HasKey("UsuId");

                    b.HasIndex("AcudienteAcuCodigo");

                    b.HasIndex("GeneroGenId");

                    b.HasIndex("TipoDocumentoTipDocId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Core.Entities.Cita", b =>
                {
                    b.HasOne("Core.Entities.EstadoCita", "EstadoCita")
                        .WithMany("Citas")
                        .HasForeignKey("EstadoCitaEstCitaId");

                    b.HasOne("Core.Entities.Medico", "Medico")
                        .WithMany("Citas")
                        .HasForeignKey("MedicoMedNroMatriculaProfesional");

                    b.HasOne("Core.Entities.Usuario", "Usuario")
                        .WithMany("Citas")
                        .HasForeignKey("UsuarioUsuId");

                    b.Navigation("EstadoCita");

                    b.Navigation("Medico");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Entities.Medico", b =>
                {
                    b.HasOne("Core.Entities.Consultorio", "Consultorio")
                        .WithMany("Medicos")
                        .HasForeignKey("ConsultorioConsCodigo");

                    b.HasOne("Core.Entities.Especialidad", "Especialidad")
                        .WithMany("Medicos")
                        .HasForeignKey("EspecialidadEspId");

                    b.Navigation("Consultorio");

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("Core.Entities.Usuario", b =>
                {
                    b.HasOne("Core.Entities.Acudiente", "Acudiente")
                        .WithMany("Usuarios")
                        .HasForeignKey("AcudienteAcuCodigo");

                    b.HasOne("Core.Entities.Genero", "Genero")
                        .WithMany("Usuarios")
                        .HasForeignKey("GeneroGenId");

                    b.HasOne("Core.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Usuarios")
                        .HasForeignKey("TipoDocumentoTipDocId");

                    b.Navigation("Acudiente");

                    b.Navigation("Genero");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Core.Entities.Acudiente", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Entities.Consultorio", b =>
                {
                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("Core.Entities.Especialidad", b =>
                {
                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("Core.Entities.EstadoCita", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("Core.Entities.Genero", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Entities.Medico", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("Core.Entities.TipoDocumento", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Entities.Usuario", b =>
                {
                    b.Navigation("Citas");
                });
#pragma warning restore 612, 618
        }
    }
}
